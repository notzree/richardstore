syntax = "proto3";
package raft;
option go_package = "github.com/notzree/richardstore/proto";



service NameNode {
  rpc CreateFile (CreateFileRequest) returns (CreateFileResponse);
  rpc ReadFile (ReadFileRequest) returns (ReadFileResponse);
  rpc DeleteFile (DeleteFileRequest) returns (DeleteFileResponse);

  // -- Consensus --
  // followers -> leader (lightweight)
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);
  // followers -> leader (full inventory)
  rpc BlockReport(BlockReportRequest) returns (BlockReportResponse);
  rpc IncrementalBlockReport(IncrementalBlockReportRequest) returns (BlockReportResponse);


}
message CreateFileRequest {
  uint32 min_replication_factor = 1;
  uint64 size = 2;
}

message CreateFileResponse {
  repeated DataNodeInfo data_nodes = 1;
}
message DataNodeInfo {
  string address = 1; // incl port
}

message ReadFileRequest {
  bytes hash = 1;
}

message ReadFileResponse {
  repeated DataNodeInfo data_nodes = 1;
  uint64 size = 2;
}

message DeleteFileRequest {
  bytes hash = 1;
}

message DeleteFileResponse {
  bool success = 1;
}






// Follower sends to leader
message BlockReportRequest {
  uint64 node_id = 1;        

  // File information
  repeated FileInfo held_files = 2;

  // Node status/health
  uint64 available_space = 3;    // In bytes
  float cpu_load = 4;            // Current CPU load
  float disk_load = 5;           // Disk I/O load
  uint64 timestamp = 6;          // When report was generated

  // Optional optimization fields
  uint64 last_report_id = 7;     // ID of last successful report
}

message FileInfo {
  bytes hash = 1;             // To verify file integrity
  uint64 size = 2;           // File size in bytes
  float min_replication_factor = 3;
  uint64 generation_stamp = 4;
}

// Leader responds to follower
message BlockReportResponse {
  uint64 node_id =1;
  repeated Command commands = 2;
  uint64 next_report_delay = 3;  // Suggested delay before next report
  uint64 report_id = 4;          // ID for this report 
}


// follower sends to leader
message HeartbeatRequest {
  uint64 node_id = 1;
  float capacity = 2;
  float used = 3;
}

// leader responds to followers
message HeartbeatResponse {
  uint64 node_id = 1;
  uint64 next_heartbeat_delay = 2;
  repeated Command commands = 3;
}


message IncrementalBlockReportRequest {
  uint64 node_id = 1;
  repeated FileUpdate updates = 2;
}


// updated file
message FileUpdate {
  FileInfo file_info = 1;
  Update update = 2;
  enum Update {
    UPDATE_UNSPECIFIED = 0;
    UPDATE_ADD = 1;
    UPDATE_DELETE =2;
  }
}






message Command {
  oneof c {
    ReplicateCommand rc = 1;
    DeleteCommand dc = 2;
  }
}

message DeleteCommand{
  FileInfo file_info =1;
}
message ReplicateCommand {
  FileInfo file_info = 1;
  repeated string target_nodes = 2;  // Where to replicate to
  float current_replication_factor = 3;
}
