// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.29.3
// source: proto/schema.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FileUpdate_Update int32

const (
	FileUpdate_UPDATE_UNSPECIFIED FileUpdate_Update = 0
	FileUpdate_UPDATE_ADD         FileUpdate_Update = 1
	FileUpdate_UPDATE_DELETE      FileUpdate_Update = 2
)

// Enum value maps for FileUpdate_Update.
var (
	FileUpdate_Update_name = map[int32]string{
		0: "UPDATE_UNSPECIFIED",
		1: "UPDATE_ADD",
		2: "UPDATE_DELETE",
	}
	FileUpdate_Update_value = map[string]int32{
		"UPDATE_UNSPECIFIED": 0,
		"UPDATE_ADD":         1,
		"UPDATE_DELETE":      2,
	}
)

func (x FileUpdate_Update) Enum() *FileUpdate_Update {
	p := new(FileUpdate_Update)
	*p = x
	return p
}

func (x FileUpdate_Update) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileUpdate_Update) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_schema_proto_enumTypes[0].Descriptor()
}

func (FileUpdate_Update) Type() protoreflect.EnumType {
	return &file_proto_schema_proto_enumTypes[0]
}

func (x FileUpdate_Update) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileUpdate_Update.Descriptor instead.
func (FileUpdate_Update) EnumDescriptor() ([]byte, []int) {
	return file_proto_schema_proto_rawDescGZIP(), []int{17, 0}
}

type FileStream struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*FileStream_StreamInfo
	//	*FileStream_Chunk
	Type          isFileStream_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileStream) Reset() {
	*x = FileStream{}
	mi := &file_proto_schema_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileStream) ProtoMessage() {}

func (x *FileStream) ProtoReflect() protoreflect.Message {
	mi := &file_proto_schema_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileStream.ProtoReflect.Descriptor instead.
func (*FileStream) Descriptor() ([]byte, []int) {
	return file_proto_schema_proto_rawDescGZIP(), []int{0}
}

func (x *FileStream) GetType() isFileStream_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *FileStream) GetStreamInfo() *StreamInfo {
	if x != nil {
		if x, ok := x.Type.(*FileStream_StreamInfo); ok {
			return x.StreamInfo
		}
	}
	return nil
}

func (x *FileStream) GetChunk() []byte {
	if x != nil {
		if x, ok := x.Type.(*FileStream_Chunk); ok {
			return x.Chunk
		}
	}
	return nil
}

type isFileStream_Type interface {
	isFileStream_Type()
}

type FileStream_StreamInfo struct {
	StreamInfo *StreamInfo `protobuf:"bytes,1,opt,name=stream_info,json=streamInfo,proto3,oneof"`
}

type FileStream_Chunk struct {
	Chunk []byte `protobuf:"bytes,2,opt,name=chunk,proto3,oneof"`
}

func (*FileStream_StreamInfo) isFileStream_Type() {}

func (*FileStream_Chunk) isFileStream_Type() {}

type StreamInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileInfo      *FileInfo              `protobuf:"bytes,1,opt,name=file_info,json=fileInfo,proto3" json:"file_info,omitempty"`
	DataNodes     []*DataNodeInfo        `protobuf:"bytes,2,rep,name=data_nodes,json=dataNodes,proto3" json:"data_nodes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamInfo) Reset() {
	*x = StreamInfo{}
	mi := &file_proto_schema_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamInfo) ProtoMessage() {}

func (x *StreamInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_schema_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamInfo.ProtoReflect.Descriptor instead.
func (*StreamInfo) Descriptor() ([]byte, []int) {
	return file_proto_schema_proto_rawDescGZIP(), []int{1}
}

func (x *StreamInfo) GetFileInfo() *FileInfo {
	if x != nil {
		return x.FileInfo
	}
	return nil
}

func (x *StreamInfo) GetDataNodes() []*DataNodeInfo {
	if x != nil {
		return x.DataNodes
	}
	return nil
}

type WriteFileResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteFileResponse) Reset() {
	*x = WriteFileResponse{}
	mi := &file_proto_schema_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteFileResponse) ProtoMessage() {}

func (x *WriteFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_schema_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteFileResponse.ProtoReflect.Descriptor instead.
func (*WriteFileResponse) Descriptor() ([]byte, []int) {
	return file_proto_schema_proto_rawDescGZIP(), []int{2}
}

func (x *WriteFileResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type NameNodeInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DataNodes     []*DataNodeInfo        `protobuf:"bytes,1,rep,name=data_nodes,json=dataNodes,proto3" json:"data_nodes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NameNodeInfo) Reset() {
	*x = NameNodeInfo{}
	mi := &file_proto_schema_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NameNodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NameNodeInfo) ProtoMessage() {}

func (x *NameNodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_schema_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NameNodeInfo.ProtoReflect.Descriptor instead.
func (*NameNodeInfo) Descriptor() ([]byte, []int) {
	return file_proto_schema_proto_rawDescGZIP(), []int{3}
}

func (x *NameNodeInfo) GetDataNodes() []*DataNodeInfo {
	if x != nil {
		return x.DataNodes
	}
	return nil
}

type WriteFileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileInfo      *FileInfo              `protobuf:"bytes,1,opt,name=file_info,json=fileInfo,proto3" json:"file_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteFileRequest) Reset() {
	*x = WriteFileRequest{}
	mi := &file_proto_schema_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteFileRequest) ProtoMessage() {}

func (x *WriteFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_schema_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteFileRequest.ProtoReflect.Descriptor instead.
func (*WriteFileRequest) Descriptor() ([]byte, []int) {
	return file_proto_schema_proto_rawDescGZIP(), []int{4}
}

func (x *WriteFileRequest) GetFileInfo() *FileInfo {
	if x != nil {
		return x.FileInfo
	}
	return nil
}

type CreateFileResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DataNodes     []*DataNodeInfo        `protobuf:"bytes,1,rep,name=data_nodes,json=dataNodes,proto3" json:"data_nodes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateFileResponse) Reset() {
	*x = CreateFileResponse{}
	mi := &file_proto_schema_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFileResponse) ProtoMessage() {}

func (x *CreateFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_schema_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFileResponse.ProtoReflect.Descriptor instead.
func (*CreateFileResponse) Descriptor() ([]byte, []int) {
	return file_proto_schema_proto_rawDescGZIP(), []int{5}
}

func (x *CreateFileResponse) GetDataNodes() []*DataNodeInfo {
	if x != nil {
		return x.DataNodes
	}
	return nil
}

type DataNodeInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint64                 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Address       string                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"` // incl port
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataNodeInfo) Reset() {
	*x = DataNodeInfo{}
	mi := &file_proto_schema_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataNodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataNodeInfo) ProtoMessage() {}

func (x *DataNodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_schema_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataNodeInfo.ProtoReflect.Descriptor instead.
func (*DataNodeInfo) Descriptor() ([]byte, []int) {
	return file_proto_schema_proto_rawDescGZIP(), []int{6}
}

func (x *DataNodeInfo) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DataNodeInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type ReadFileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hash          string                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadFileRequest) Reset() {
	*x = ReadFileRequest{}
	mi := &file_proto_schema_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadFileRequest) ProtoMessage() {}

func (x *ReadFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_schema_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadFileRequest.ProtoReflect.Descriptor instead.
func (*ReadFileRequest) Descriptor() ([]byte, []int) {
	return file_proto_schema_proto_rawDescGZIP(), []int{7}
}

func (x *ReadFileRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type ReadFileResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DataNodes     []*DataNodeInfo        `protobuf:"bytes,1,rep,name=data_nodes,json=dataNodes,proto3" json:"data_nodes,omitempty"`
	Size          uint64                 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadFileResponse) Reset() {
	*x = ReadFileResponse{}
	mi := &file_proto_schema_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadFileResponse) ProtoMessage() {}

func (x *ReadFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_schema_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadFileResponse.ProtoReflect.Descriptor instead.
func (*ReadFileResponse) Descriptor() ([]byte, []int) {
	return file_proto_schema_proto_rawDescGZIP(), []int{8}
}

func (x *ReadFileResponse) GetDataNodes() []*DataNodeInfo {
	if x != nil {
		return x.DataNodes
	}
	return nil
}

func (x *ReadFileResponse) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type DeleteFileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hash          string                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteFileRequest) Reset() {
	*x = DeleteFileRequest{}
	mi := &file_proto_schema_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFileRequest) ProtoMessage() {}

func (x *DeleteFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_schema_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFileRequest.ProtoReflect.Descriptor instead.
func (*DeleteFileRequest) Descriptor() ([]byte, []int) {
	return file_proto_schema_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteFileRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type DeleteFileResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteFileResponse) Reset() {
	*x = DeleteFileResponse{}
	mi := &file_proto_schema_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFileResponse) ProtoMessage() {}

func (x *DeleteFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_schema_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFileResponse.ProtoReflect.Descriptor instead.
func (*DeleteFileResponse) Descriptor() ([]byte, []int) {
	return file_proto_schema_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteFileResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// Follower sends to leader
type BlockReportRequest struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	NodeId uint64                 `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// File information
	HeldFiles []*FileInfo `protobuf:"bytes,2,rep,name=held_files,json=heldFiles,proto3" json:"held_files,omitempty"`
	// Node status/health
	Capacity  uint64  `protobuf:"varint,3,opt,name=capacity,proto3" json:"capacity,omitempty"` // In bytes
	Used      uint64  `protobuf:"varint,4,opt,name=used,proto3" json:"used,omitempty"`
	CpuLoad   float32 `protobuf:"fixed32,5,opt,name=cpu_load,json=cpuLoad,proto3" json:"cpu_load,omitempty"`    // Current CPU load
	DiskLoad  float32 `protobuf:"fixed32,6,opt,name=disk_load,json=diskLoad,proto3" json:"disk_load,omitempty"` // Disk I/O load
	Timestamp uint64  `protobuf:"varint,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                // When report was generated
	// Optional optimization fields
	LastReportId  uint64 `protobuf:"varint,8,opt,name=last_report_id,json=lastReportId,proto3" json:"last_report_id,omitempty"` // ID of last successful report
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockReportRequest) Reset() {
	*x = BlockReportRequest{}
	mi := &file_proto_schema_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockReportRequest) ProtoMessage() {}

func (x *BlockReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_schema_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockReportRequest.ProtoReflect.Descriptor instead.
func (*BlockReportRequest) Descriptor() ([]byte, []int) {
	return file_proto_schema_proto_rawDescGZIP(), []int{11}
}

func (x *BlockReportRequest) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *BlockReportRequest) GetHeldFiles() []*FileInfo {
	if x != nil {
		return x.HeldFiles
	}
	return nil
}

func (x *BlockReportRequest) GetCapacity() uint64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *BlockReportRequest) GetUsed() uint64 {
	if x != nil {
		return x.Used
	}
	return 0
}

func (x *BlockReportRequest) GetCpuLoad() float32 {
	if x != nil {
		return x.CpuLoad
	}
	return 0
}

func (x *BlockReportRequest) GetDiskLoad() float32 {
	if x != nil {
		return x.DiskLoad
	}
	return 0
}

func (x *BlockReportRequest) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *BlockReportRequest) GetLastReportId() uint64 {
	if x != nil {
		return x.LastReportId
	}
	return 0
}

type FileInfo struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Hash                 string                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`  // To verify file integrity
	Size                 uint64                 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"` // File size in bytes
	MinReplicationFactor float32                `protobuf:"fixed32,3,opt,name=min_replication_factor,json=minReplicationFactor,proto3" json:"min_replication_factor,omitempty"`
	ModificationStamp    uint64                 `protobuf:"varint,4,opt,name=modification_stamp,json=modificationStamp,proto3" json:"modification_stamp,omitempty"`
	GenerationStamp      uint64                 `protobuf:"varint,5,opt,name=generation_stamp,json=generationStamp,proto3" json:"generation_stamp,omitempty"` // when the file was created
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	mi := &file_proto_schema_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_schema_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_proto_schema_proto_rawDescGZIP(), []int{12}
}

func (x *FileInfo) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *FileInfo) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FileInfo) GetMinReplicationFactor() float32 {
	if x != nil {
		return x.MinReplicationFactor
	}
	return 0
}

func (x *FileInfo) GetModificationStamp() uint64 {
	if x != nil {
		return x.ModificationStamp
	}
	return 0
}

func (x *FileInfo) GetGenerationStamp() uint64 {
	if x != nil {
		return x.GenerationStamp
	}
	return 0
}

// Leader responds to follower
type BlockReportResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	NodeId          uint64                 `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	NextReportDelay uint64                 `protobuf:"varint,3,opt,name=next_report_delay,json=nextReportDelay,proto3" json:"next_report_delay,omitempty"` // Suggested delay before next report
	ReportId        uint64                 `protobuf:"varint,4,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`                        // ID for this report
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *BlockReportResponse) Reset() {
	*x = BlockReportResponse{}
	mi := &file_proto_schema_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockReportResponse) ProtoMessage() {}

func (x *BlockReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_schema_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockReportResponse.ProtoReflect.Descriptor instead.
func (*BlockReportResponse) Descriptor() ([]byte, []int) {
	return file_proto_schema_proto_rawDescGZIP(), []int{13}
}

func (x *BlockReportResponse) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *BlockReportResponse) GetNextReportDelay() uint64 {
	if x != nil {
		return x.NextReportDelay
	}
	return 0
}

func (x *BlockReportResponse) GetReportId() uint64 {
	if x != nil {
		return x.ReportId
	}
	return 0
}

// follower sends to leader
type HeartbeatRequest struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	NodeId  uint64                 `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Address string                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// in bytes
	Capacity      uint64 `protobuf:"varint,3,opt,name=capacity,proto3" json:"capacity,omitempty"`
	Used          uint64 `protobuf:"varint,4,opt,name=used,proto3" json:"used,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HeartbeatRequest) Reset() {
	*x = HeartbeatRequest{}
	mi := &file_proto_schema_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeartbeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatRequest) ProtoMessage() {}

func (x *HeartbeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_schema_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatRequest.ProtoReflect.Descriptor instead.
func (*HeartbeatRequest) Descriptor() ([]byte, []int) {
	return file_proto_schema_proto_rawDescGZIP(), []int{14}
}

func (x *HeartbeatRequest) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *HeartbeatRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *HeartbeatRequest) GetCapacity() uint64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *HeartbeatRequest) GetUsed() uint64 {
	if x != nil {
		return x.Used
	}
	return 0
}

// leader responds to followers
type HeartbeatResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	NodeId             uint64                 `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	NextHeartbeatDelay uint64                 `protobuf:"varint,2,opt,name=next_heartbeat_delay,json=nextHeartbeatDelay,proto3" json:"next_heartbeat_delay,omitempty"`
	Commands           []*Command             `protobuf:"bytes,3,rep,name=commands,proto3" json:"commands,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *HeartbeatResponse) Reset() {
	*x = HeartbeatResponse{}
	mi := &file_proto_schema_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeartbeatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatResponse) ProtoMessage() {}

func (x *HeartbeatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_schema_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatResponse.ProtoReflect.Descriptor instead.
func (*HeartbeatResponse) Descriptor() ([]byte, []int) {
	return file_proto_schema_proto_rawDescGZIP(), []int{15}
}

func (x *HeartbeatResponse) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *HeartbeatResponse) GetNextHeartbeatDelay() uint64 {
	if x != nil {
		return x.NextHeartbeatDelay
	}
	return 0
}

func (x *HeartbeatResponse) GetCommands() []*Command {
	if x != nil {
		return x.Commands
	}
	return nil
}

type IncrementalBlockReportRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeId        uint64                 `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Updates       []*FileUpdate          `protobuf:"bytes,2,rep,name=updates,proto3" json:"updates,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IncrementalBlockReportRequest) Reset() {
	*x = IncrementalBlockReportRequest{}
	mi := &file_proto_schema_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IncrementalBlockReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncrementalBlockReportRequest) ProtoMessage() {}

func (x *IncrementalBlockReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_schema_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncrementalBlockReportRequest.ProtoReflect.Descriptor instead.
func (*IncrementalBlockReportRequest) Descriptor() ([]byte, []int) {
	return file_proto_schema_proto_rawDescGZIP(), []int{16}
}

func (x *IncrementalBlockReportRequest) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *IncrementalBlockReportRequest) GetUpdates() []*FileUpdate {
	if x != nil {
		return x.Updates
	}
	return nil
}

// updated file
// this pattern is suboptimal and could be improved
type FileUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileInfo      *FileInfo              `protobuf:"bytes,1,opt,name=file_info,json=fileInfo,proto3" json:"file_info,omitempty"`
	Update        FileUpdate_Update      `protobuf:"varint,2,opt,name=update,proto3,enum=raft.FileUpdate_Update" json:"update,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileUpdate) Reset() {
	*x = FileUpdate{}
	mi := &file_proto_schema_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileUpdate) ProtoMessage() {}

func (x *FileUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_schema_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileUpdate.ProtoReflect.Descriptor instead.
func (*FileUpdate) Descriptor() ([]byte, []int) {
	return file_proto_schema_proto_rawDescGZIP(), []int{17}
}

func (x *FileUpdate) GetFileInfo() *FileInfo {
	if x != nil {
		return x.FileInfo
	}
	return nil
}

func (x *FileUpdate) GetUpdate() FileUpdate_Update {
	if x != nil {
		return x.Update
	}
	return FileUpdate_UPDATE_UNSPECIFIED
}

type Command struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Command:
	//
	//	*Command_Replicate
	//	*Command_Delete
	Command       isCommand_Command `protobuf_oneof:"command"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Command) Reset() {
	*x = Command{}
	mi := &file_proto_schema_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command) ProtoMessage() {}

func (x *Command) ProtoReflect() protoreflect.Message {
	mi := &file_proto_schema_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command.ProtoReflect.Descriptor instead.
func (*Command) Descriptor() ([]byte, []int) {
	return file_proto_schema_proto_rawDescGZIP(), []int{18}
}

func (x *Command) GetCommand() isCommand_Command {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *Command) GetReplicate() *ReplicateCommand {
	if x != nil {
		if x, ok := x.Command.(*Command_Replicate); ok {
			return x.Replicate
		}
	}
	return nil
}

func (x *Command) GetDelete() *DeleteCommand {
	if x != nil {
		if x, ok := x.Command.(*Command_Delete); ok {
			return x.Delete
		}
	}
	return nil
}

type isCommand_Command interface {
	isCommand_Command()
}

type Command_Replicate struct {
	Replicate *ReplicateCommand `protobuf:"bytes,1,opt,name=replicate,proto3,oneof"`
}

type Command_Delete struct {
	Delete *DeleteCommand `protobuf:"bytes,2,opt,name=delete,proto3,oneof"`
}

func (*Command_Replicate) isCommand_Command() {}

func (*Command_Delete) isCommand_Command() {}

type DeleteCommand struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileInfo      *FileInfo              `protobuf:"bytes,1,opt,name=file_info,json=fileInfo,proto3" json:"file_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCommand) Reset() {
	*x = DeleteCommand{}
	mi := &file_proto_schema_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCommand) ProtoMessage() {}

func (x *DeleteCommand) ProtoReflect() protoreflect.Message {
	mi := &file_proto_schema_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCommand.ProtoReflect.Descriptor instead.
func (*DeleteCommand) Descriptor() ([]byte, []int) {
	return file_proto_schema_proto_rawDescGZIP(), []int{19}
}

func (x *DeleteCommand) GetFileInfo() *FileInfo {
	if x != nil {
		return x.FileInfo
	}
	return nil
}

type ReplicateCommand struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	FileInfo                 *FileInfo              `protobuf:"bytes,1,opt,name=file_info,json=fileInfo,proto3" json:"file_info,omitempty"`
	TargetNodes              []*DataNodeInfo        `protobuf:"bytes,2,rep,name=target_nodes,json=targetNodes,proto3" json:"target_nodes,omitempty"` // Where to replicate to
	CurrentReplicationFactor float32                `protobuf:"fixed32,3,opt,name=current_replication_factor,json=currentReplicationFactor,proto3" json:"current_replication_factor,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *ReplicateCommand) Reset() {
	*x = ReplicateCommand{}
	mi := &file_proto_schema_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplicateCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicateCommand) ProtoMessage() {}

func (x *ReplicateCommand) ProtoReflect() protoreflect.Message {
	mi := &file_proto_schema_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicateCommand.ProtoReflect.Descriptor instead.
func (*ReplicateCommand) Descriptor() ([]byte, []int) {
	return file_proto_schema_proto_rawDescGZIP(), []int{20}
}

func (x *ReplicateCommand) GetFileInfo() *FileInfo {
	if x != nil {
		return x.FileInfo
	}
	return nil
}

func (x *ReplicateCommand) GetTargetNodes() []*DataNodeInfo {
	if x != nil {
		return x.TargetNodes
	}
	return nil
}

func (x *ReplicateCommand) GetCurrentReplicationFactor() float32 {
	if x != nil {
		return x.CurrentReplicationFactor
	}
	return 0
}

var File_proto_schema_proto protoreflect.FileDescriptor

var file_proto_schema_proto_rawDesc = string([]byte{
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x72, 0x61, 0x66, 0x74, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x61, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x33, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x61, 0x66,
	0x74, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0a,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x05, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x6c, 0x0a, 0x0a, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x61,
	0x66, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x61, 0x66, 0x74,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x64,
	0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x2d, 0x0a, 0x11, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x41, 0x0a, 0x0c, 0x4e, 0x61, 0x6d, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x61,
	0x66, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x64, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x3f, 0x0a, 0x10, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b,
	0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x47, 0x0a, 0x12, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x31, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x22, 0x38, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x25,
	0x0a, 0x0f, 0x52, 0x65, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x59, 0x0a, 0x10, 0x52, 0x65, 0x61, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x72, 0x61, 0x66, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x22, 0x27, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x2e, 0x0a, 0x12, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x88, 0x02, 0x0a, 0x12, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x0a, 0x68, 0x65, 0x6c,
	0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x72, 0x61, 0x66, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x68,
	0x65, 0x6c, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x75, 0x73, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x5f,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x63, 0x70, 0x75, 0x4c,
	0x6f, 0x61, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x4c, 0x6f, 0x61, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x24,
	0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x49, 0x64, 0x22, 0xc2, 0x01, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x69, 0x6e,
	0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x6d, 0x69, 0x6e, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x2d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x29,
	0x0a, 0x10, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x77, 0x0a, 0x13, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x49, 0x64, 0x22, 0x75, 0x0a, 0x10, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x75, 0x73, 0x65, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x11, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x29, 0x0a, 0x08, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72,
	0x61, 0x66, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x08, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x73, 0x22, 0x64, 0x0a, 0x1d, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x0a,
	0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x72, 0x61, 0x66, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x43, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x22, 0x7b, 0x0a,
	0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x36, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x61,
	0x66, 0x74, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x12, 0x2d, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0x3c, 0x0a, 0x0d, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x2b, 0x0a, 0x09, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xb4, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x2b, 0x0a,
	0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x0c, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x32,
	0x7b, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x10, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x1a, 0x17, 0x2e, 0x72, 0x61, 0x66,
	0x74, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x28, 0x01, 0x12, 0x35, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x15, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x30, 0x01, 0x32, 0xd5, 0x03, 0x0a,
	0x08, 0x4e, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18,
	0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x15, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x72, 0x61,
	0x66, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x17, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x72, 0x61, 0x66,
	0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x12, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x16, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x48, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x72, 0x61, 0x66, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x19, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x16, 0x49, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x23, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x49, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x72, 0x61, 0x66, 0x74,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x27, 0x5a, 0x25, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6e, 0x6f, 0x74, 0x7a, 0x72, 0x65, 0x65, 0x2f, 0x72, 0x69, 0x63, 0x68, 0x61,
	0x72, 0x64, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_proto_schema_proto_rawDescOnce sync.Once
	file_proto_schema_proto_rawDescData []byte
)

func file_proto_schema_proto_rawDescGZIP() []byte {
	file_proto_schema_proto_rawDescOnce.Do(func() {
		file_proto_schema_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_schema_proto_rawDesc), len(file_proto_schema_proto_rawDesc)))
	})
	return file_proto_schema_proto_rawDescData
}

var file_proto_schema_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_schema_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_proto_schema_proto_goTypes = []any{
	(FileUpdate_Update)(0),                // 0: raft.FileUpdate.Update
	(*FileStream)(nil),                    // 1: raft.FileStream
	(*StreamInfo)(nil),                    // 2: raft.StreamInfo
	(*WriteFileResponse)(nil),             // 3: raft.WriteFileResponse
	(*NameNodeInfo)(nil),                  // 4: raft.NameNodeInfo
	(*WriteFileRequest)(nil),              // 5: raft.WriteFileRequest
	(*CreateFileResponse)(nil),            // 6: raft.CreateFileResponse
	(*DataNodeInfo)(nil),                  // 7: raft.DataNodeInfo
	(*ReadFileRequest)(nil),               // 8: raft.ReadFileRequest
	(*ReadFileResponse)(nil),              // 9: raft.ReadFileResponse
	(*DeleteFileRequest)(nil),             // 10: raft.DeleteFileRequest
	(*DeleteFileResponse)(nil),            // 11: raft.DeleteFileResponse
	(*BlockReportRequest)(nil),            // 12: raft.BlockReportRequest
	(*FileInfo)(nil),                      // 13: raft.FileInfo
	(*BlockReportResponse)(nil),           // 14: raft.BlockReportResponse
	(*HeartbeatRequest)(nil),              // 15: raft.HeartbeatRequest
	(*HeartbeatResponse)(nil),             // 16: raft.HeartbeatResponse
	(*IncrementalBlockReportRequest)(nil), // 17: raft.IncrementalBlockReportRequest
	(*FileUpdate)(nil),                    // 18: raft.FileUpdate
	(*Command)(nil),                       // 19: raft.Command
	(*DeleteCommand)(nil),                 // 20: raft.DeleteCommand
	(*ReplicateCommand)(nil),              // 21: raft.ReplicateCommand
	(*emptypb.Empty)(nil),                 // 22: google.protobuf.Empty
}
var file_proto_schema_proto_depIdxs = []int32{
	2,  // 0: raft.FileStream.stream_info:type_name -> raft.StreamInfo
	13, // 1: raft.StreamInfo.file_info:type_name -> raft.FileInfo
	7,  // 2: raft.StreamInfo.data_nodes:type_name -> raft.DataNodeInfo
	7,  // 3: raft.NameNodeInfo.data_nodes:type_name -> raft.DataNodeInfo
	13, // 4: raft.WriteFileRequest.file_info:type_name -> raft.FileInfo
	7,  // 5: raft.CreateFileResponse.data_nodes:type_name -> raft.DataNodeInfo
	7,  // 6: raft.ReadFileResponse.data_nodes:type_name -> raft.DataNodeInfo
	13, // 7: raft.BlockReportRequest.held_files:type_name -> raft.FileInfo
	19, // 8: raft.HeartbeatResponse.commands:type_name -> raft.Command
	18, // 9: raft.IncrementalBlockReportRequest.updates:type_name -> raft.FileUpdate
	13, // 10: raft.FileUpdate.file_info:type_name -> raft.FileInfo
	0,  // 11: raft.FileUpdate.update:type_name -> raft.FileUpdate.Update
	21, // 12: raft.Command.replicate:type_name -> raft.ReplicateCommand
	20, // 13: raft.Command.delete:type_name -> raft.DeleteCommand
	13, // 14: raft.DeleteCommand.file_info:type_name -> raft.FileInfo
	13, // 15: raft.ReplicateCommand.file_info:type_name -> raft.FileInfo
	7,  // 16: raft.ReplicateCommand.target_nodes:type_name -> raft.DataNodeInfo
	1,  // 17: raft.DataNode.WriteFile:input_type -> raft.FileStream
	8,  // 18: raft.DataNode.ReadFile:input_type -> raft.ReadFileRequest
	5,  // 19: raft.NameNode.WriteFile:input_type -> raft.WriteFileRequest
	8,  // 20: raft.NameNode.ReadFile:input_type -> raft.ReadFileRequest
	10, // 21: raft.NameNode.DeleteFile:input_type -> raft.DeleteFileRequest
	22, // 22: raft.NameNode.Info:input_type -> google.protobuf.Empty
	15, // 23: raft.NameNode.Heartbeat:input_type -> raft.HeartbeatRequest
	12, // 24: raft.NameNode.BlockReport:input_type -> raft.BlockReportRequest
	17, // 25: raft.NameNode.IncrementalBlockReport:input_type -> raft.IncrementalBlockReportRequest
	3,  // 26: raft.DataNode.WriteFile:output_type -> raft.WriteFileResponse
	1,  // 27: raft.DataNode.ReadFile:output_type -> raft.FileStream
	6,  // 28: raft.NameNode.WriteFile:output_type -> raft.CreateFileResponse
	9,  // 29: raft.NameNode.ReadFile:output_type -> raft.ReadFileResponse
	11, // 30: raft.NameNode.DeleteFile:output_type -> raft.DeleteFileResponse
	4,  // 31: raft.NameNode.Info:output_type -> raft.NameNodeInfo
	16, // 32: raft.NameNode.Heartbeat:output_type -> raft.HeartbeatResponse
	14, // 33: raft.NameNode.BlockReport:output_type -> raft.BlockReportResponse
	14, // 34: raft.NameNode.IncrementalBlockReport:output_type -> raft.BlockReportResponse
	26, // [26:35] is the sub-list for method output_type
	17, // [17:26] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_proto_schema_proto_init() }
func file_proto_schema_proto_init() {
	if File_proto_schema_proto != nil {
		return
	}
	file_proto_schema_proto_msgTypes[0].OneofWrappers = []any{
		(*FileStream_StreamInfo)(nil),
		(*FileStream_Chunk)(nil),
	}
	file_proto_schema_proto_msgTypes[18].OneofWrappers = []any{
		(*Command_Replicate)(nil),
		(*Command_Delete)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_schema_proto_rawDesc), len(file_proto_schema_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_proto_schema_proto_goTypes,
		DependencyIndexes: file_proto_schema_proto_depIdxs,
		EnumInfos:         file_proto_schema_proto_enumTypes,
		MessageInfos:      file_proto_schema_proto_msgTypes,
	}.Build()
	File_proto_schema_proto = out.File
	file_proto_schema_proto_goTypes = nil
	file_proto_schema_proto_depIdxs = nil
}
